---
title: "Introduction to bayesian modeles for ecology"
author : Coline - Jules - Mathis - Romane - Laura
bibliography: references.bib
execute: 
  freeze: auto
output: 
  html_document:
   toc: true
   toc_float: true
---

```{r setup}
#| include: false

library(tidyverse)
library(deSolve)

```

# Introduction

-   History of Bayesian concept.
-   Philosophy behind it. Frequentist approach : "What is the probability to observe my data given my model."

Bayesian approach : "What is the probability of m y model given my data."

# General theory behind Bayesian approach.

Explanation in the special case of conjugation between prior and posterior

## Main objective, for context

First, let's take an simple example to explain the idea behind Bayesian method. We want to estimate the mean abundance per $m^2$ of one fungus in a forests. To do that, we set up it some sampling area in which we count the number of mushroom. We can simulate the data by taking random observations in a poisson distribution. Let's suppose that our studies as 200 sampling area. **Because it is count data, number of mushroom that we will count should follow a poisson distribution :**

```{r}
n_sample = 200 # sampling area
lbda = 5 # mean of poisson distribution
pois_distr = dpois(1:20, lambda = lbda)
plot(pois_distr,type ="h",
     lwd = 2, col = 'blue',
     xlab = "Mushroom Count", 
     ylab = expression(paste( 'Density or ','[y]')) )

```

To simulate the sampling campaign we are taking values in this poisson distribution . In our case those will be used to estimate the mean number of mushroom in the forest.($\lambda = 5$ is already known because we simulate the data, but in reality this is an unknown).

```{r}
set.seed(1000)

Y = rpois(n = n_sample, lambda = lbda)

hist(Y)
```

**So let's pretend that we don't know the** $\lambda$. We want to find the the value of the mean number of mushroom we will call $\hat{\lambda}$ and we also want to know the probability of this $\hat{\lambda}$. In fact the Bayesian method will give us the multiple estimated mean $\hat{\lambda}$ and the probability of those value to be true knowing the observation $Y$. We can simply write this as follow $[\hat{\lambda} \mid Y]$ which is the probability of hat lambda knowing our observations. This probability can be found with the equation :

$$
[\hat{\lambda} \mid Y] = [Y \mid \hat{\lambda}  ]\cdot[\hat{\lambda}]
$$

The two component of the right hand side of the equation are $[Y \mid \hat{\lambda} ]$ the likelihood of our data and $[\hat{\lambda}]$ the prior distribution. First lets start with the likelihood. Our data follow a poisson distribution so our likelihood will follow a poisson distribution :

$$
L(\hat{\lambda} ; y)=[y \mid \hat{\lambda}] = \frac{e^{-\hat{\lambda}} \cdot\hat{\lambda}^{y}}{y!}
$$

This a first good step, but there is a small issue here, this formula isn't completely usable in this form. This is because it can only take one observation. In english words it is like asking what is the probability of one observation (one count of mushroom) given a model with a mean $\hat{\lambda}$. It it clear that this form isn't powerful enough because it use only one observation. What we want is to use all the data that we have, we want to know the probability of all the observations given a model with a mean $\hat{\lambda}$. To do so we can write the likelihood of all our data $Y$ as the product of the likelihood of each observation $y_i$. (We are allowed to do this only because observations are independent)

$$
\begin{align}
[Y \mid \hat{\lambda}] &= \prod^{n}_{i=1}[y_i \mid \hat{\lambda}] \\
&=\prod^{n}_{i=1}\frac{e^{-\hat{\lambda}} \cdot\hat{\lambda}^{y_i}}{y_i!} \\
&\propto \prod^{n}_{i=1}e^{-\hat{\lambda}} \cdot\hat{\lambda}^{y_i}\\
\end{align}
$$

As you can see we don't keep the $\frac{1}{y_i!}$, it is because we are only interested in the terms that are impacted by $\hat{\lambda}$. The last form which is proportional to the likelihood function have a more convenient form for the next step. Lets rearrange the function in a more convenient form

$$
\begin{align}
\prod^{n}_{i=1}e^{-\hat{\lambda}} \cdot\hat{\lambda}^{y_i}&= e^{-n \cdot\hat{\lambda}} \cdot\hat{\lambda}^{\sum^{n}_{i=1} y_i}\\
&= e^{-n \cdot\hat{\lambda}} \cdot\hat{\lambda}^{n \cdot \bar{y}}\\
\end{align}
$$

The fist line just use the power/exponential multiplication properties. The second line is just a writing simplification that is common in other resources, $mean(y)=\bar{y} = \frac{1}{n}\sum_{i=1}^n \Rightarrow n\cdot \bar{y} = \hat{\lambda}^{\sum^{n}_{i=1} y_i}$.

Now we want to find the prior distribution of $\hat{\lambda}$. Fist we have to choose the distribution family of our prior. We will use a Gamma distribution. We are using this one because it let the prior and the posterior have the same distribution family, it is called conjugate distributions. The the prior is called a conjugate prior for the likelihood function. Which mean that the prior function and the likelihood function have the same form ! And this means that we can simplify ! lets try it :

$$
\begin{align}
[\hat{\lambda}]&\sim Gamma(\lambda,\alpha_p,\beta_p) \\
&= \lambda^{\alpha_p -1}\frac{\beta_p^\alpha\cdot e^{-\beta_p \lambda}}{\Gamma(\alpha_p)} \propto \lambda^{\alpha_p -1} \cdot e^{-\beta_p \lambda}
\end{align}
$$

Same as the likelihood, we are only interested by the term that vary with $\hat{\lambda}$ so we remove $\frac{\beta^\alpha}{\Gamma(\alpha)}$ and keep the proportional formula of the prior. We can now find real formula of our posterior distribution.

$$ 
\begin{align}
[\lambda \mid y] &= [y \mid \lambda]\cdot[\lambda] \\
[\lambda \mid y] &\propto e^{-n \cdot\lambda} \cdot\lambda^{n \cdot \bar{y}} \cdot \lambda^{\alpha_p -1} \cdot e^{-\beta_p \lambda}\\
[\lambda \mid y] &\propto e^{-\beta_p \lambda-n\lambda} \cdot\lambda^{n\bar{y}+\alpha_p -1} \\
[\lambda \mid y] &\propto e^{-\lambda (\beta_p +n)} \cdot\lambda^{n\bar{y}+\alpha_p -1}\\
\end{align} 
$$

Do the last formula remind you something familiar ? That's right it is a Gamma distribution ! This is the magic of the conjugate distributions. We can now write :

$$
\begin{align}
[\lambda \mid y] &\propto e^{-\lambda \beta} \cdot\lambda^{\alpha -1}\\
[\lambda \mid y] &\sim Gamma(\alpha_p +n\bar{y}, \beta_p +n)
\end{align}
$$

We can do some simulations to show the results. We are looking for the probability of $\hat{\lambda}$, so for the computation we create a vector of all $\hat{\lambda}$ for which we want to know the probability:

```{r}
lambda_hat <- seq(0,10, by = 0.01)
```

And now, in order to compare them, we compute the distribution of the prior and the posterior (which are both following a gamma distribution) with an increasing amount of sample:
```{r}
alph = 1
bet= 1

par(mfrow = c(2,3))
n_obs = 0
for(n_obs in list(0,1:5,1:10,1:50,1:100,1:200)){

  
  # prior distribution
  l_prior = dgamma(lambda_hat, shape = alph, rate = bet)
  
  plot(lambda_hat,l_prior, ylim = c(0,max(c(l_post,l_prior))),
       type = 'l', lwd = 2, col = 'orange',
       xlab = expression(lambda), 
       ylab = expression(paste('[', lambda, '|y]')) )
  
  # posterior distribution
  l_post = dgamma(lambda_hat, shape =  alph + sum(Y[n_obs]), rate = bet + max(n_obs))
  
  lines(lambda_hat,l_post, type = 'l',lty = 3, lwd = 2, col = 'purple')
  abline(v = 5, lty = 2, lwd = 2)
  
  title(paste("n = ",max(n_obs)))

}

```
When we add no data in the computation of the posterior, it is normal that we don't see any modifications from the prior. Adding 5 observation already bring some good information, the prior and the posterior have no longer the same shape and we have a better estimation of the true $\lambda$. Increase the number of data give us a better approximation of the true mean. The density of probability is also higher with a lot fo data, because we have more confidence in the approximation.

# When approximation by computation is needed

## Approximation with MCMC

```{r}
# [y | lambda]

likelihood = function(lambda,y){
  if(lambda < 0){
    return(0)
  }else{
    return( dpois(x = sum(y),lambda = lambda*length(y)))
  }
}

# [lambda]
prior.dist = function(lambda){
  dunif(lambda,0,1000)
}

# g([lambda_c(i) | lambda(i-1)])
dstep <- function(lambda1, lambda2, sd.explore = 0.1){
  dnorm(lambda2, mean = lambda1, sd = sd.explore)
}

rstep <- function(lambda, sd.explore = 0.1){
  rnorm(1, mean = lambda, sd = sd.explore)
}

MH.ratio <- function(lambda_c,lambda, y){
  ratio = (likelihood(lambda_c, y) * prior.dist(lambda) * dstep(lambda, lambda_c))/
    (likelihood(lambda, y) * prior.dist(lambda) * dstep(lambda_c, lambda))
  
  return(ratio)
}
```

```{r}
mcmc.function = function(lambda_init, n_iter = 10000, burning = 100, thin = 10){
  
  lambda_sample = rep(NA, n_iter)
  lambda_save = rep(NA, n_iter)
  lambda_sample[1] = lambda_init
  i=2
  for(i in 2:n_iter){
    lambda = lambda_sample[(i-1)]
    lambda_c = rstep(lambda)
    
    ratio = MH.ratio(lambda_c,lambda, Y)
    

    if(runif(1)<ratio){
      lambda_sample[i] = lambda_c
    }else{
      lambda_sample[i] = lambda
    }
    
  }
  lambda_save = lambda_sample[seq(burning,n_iter, by= thin)]
  return(data.frame(iteration = 1:length(lambda_save),
                    step = lambda_save))
}

```

```{r}
mcmc_df = mcmc.function(lambda_init = 10,burning = 200, n_iter = 1000000)

plot(step~iteration, mcmc_df, "l")
```




